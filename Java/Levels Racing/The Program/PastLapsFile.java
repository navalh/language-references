/* This is PastLapsFile.java, which handles operations on pastLapsFile.dat 
 *such as generating graphs and viewing lap history. Created by Naval Handa, 
 *on 24.02.2013, Emirates International School Meadows. Made on a Sony Vaio 
 *E-Series (VPCEB46FG) using JCreator. */

import java.io.*;

class PastLapsFile {
	/*This method creates and displays a performance graph of a student who has 
	 *12 months of past lap data.*/
	void generatePerformanceGraph() throws IOException {
		RandomAccessFile pastLapsFile = new RandomAccessFile ("pastLapsFile.dat","rw");
		RandomAccessFile studentFile = new RandomAccessFile ("studentFile.dat","rw");
		System.out.printf("%-4s%-18s%-5s%-15s%-12s%-12s%-12s\n\n", "ID", "Student Name", "Age", "Racing Level", "Avg. 400m", "Avg. 800m", "Avg. 1000m");
		displayAllRecordsPerformanceData(); /*Displays all the performance data 
		of the records in the studentFile.dat*/
		
		System.out.println("\nEnter the ID of the student you would like to create a performance graph for:");
		Validator validator = new Validator();
		int desiredId = validator.getAndValidateInt(1, getLastStudentRecordId()); 
		/*The user-input ID number of the student whose performance graph is 
		 *to be generated. */
		 
		int pastLapsCount = countPastLapsRecords(); /*The number of records in 
		the pastLapsFile. */
		boolean recordFound=false; /*Whether the desired record has been found 
		in the pastLapsFile.*/
		
		for (int record=0; !recordFound && record<pastLapsCount; record++) {
			pastLapsFile.seek(record*384+0);
			if (desiredId == pastLapsFile.readInt()) {
				recordFound=true;
				int studentCount = countRecords(); /*Number of records 
				(all the students) in the studentFile. */
				boolean nameFound = false; /*Whether the name of the desired 
				student has been found. */
				
				/*This loop finds the name of the student whose performance 
				 *graph is being made.*/
				for (int i=0; !nameFound && i<studentCount; i++) {
					studentFile.seek(i*128+0);
					if (desiredId == studentFile.readInt()) {
						studentFile.seek(i*128+4);
						System.out.println("\nPerformance Graph for " +(FixedLengthStringIO.readFixedLengthString(18, studentFile)).trim() +":\n");
						nameFound=true;
					}
				}
				if (!nameFound) {
					System.out.println("This student either does not exist or has somehow been deleted.");
					break;
				}
				
				int racingLevel[] = generateRacingLevelArrayForGrapher (record);
				/*This is an array of size 12 that contains the student's 
				 *average racing level across 12 months, generated by the 
				 *generateRacingLevelArrayForGrapher() method. */
				 
				grapher (racingLevel);/*The racingLevel[] array is passed to 
				the grapher() method, which displays the array as a graph.*/		
			}
		}
		if (!recordFound) 
			System.out.println("Sorry, the desired student does not have any past lap times.");
			
		studentFile.close();	
		pastLapsFile.close();
		System.out.println("\nPress 1 to create another graph or press 2 to exit to the main menu.");
		int menu = validator.getAndValidateInt(1,2);
		if (menu==1)
			generatePerformanceGraph();
	}
	
	/*This method returns a (reference to an) array that contains the average 
	 *racing level over 12 months of a student, based on his past lap times.*/
	int[] generateRacingLevelArrayForGrapher (int record) throws IOException {
		
		RandomAccessFile pastLapsFile = new RandomAccessFile ("pastLapsFile.dat","rw");
		double [][] pastLapTimes = new double[12][3]; /*A double dimensional 
		array that contains the average 400, 800 and 1000m lap times of a 
		student for 12 months. */
		
		/*This loop fills up the pastLapTimes[][] array with the data of the 
		 *student from the pastLapsFile.*/
		for (int month=0; month<pastLapTimes.length; month++) {
			pastLapsFile.seek(record*384 + month*32 + 8);
			pastLapTimes[month][0] = pastLapsFile.readDouble();

			pastLapsFile.seek(record*384 + month*32 + 16);
			pastLapTimes[month][1] = pastLapsFile.readDouble();
			
			pastLapsFile.seek(record*384 + month*32 + 24);
			pastLapTimes[month][2] = pastLapsFile.readDouble();
		}
			
		int[] racingLevel = new int [12]; /*This is the array to be returned by 
		this method: it contains the average racing level of the student over 
		12 months. It will be generated with the help of the pastLapTimes[][] 
		array. */
		
		for (int month = 0; month<pastLapTimes.length; month++) 
			racingLevel [month] = calculateRacingLevel (pastLapTimes[month]); 
			/*This method calculates the average racing level from a set of 
			 *average 400, 800 and 1000m lap times. An individual 'row' of the 
			 *2D array pastLapTimes[][] is passed to the calculateRacingLevel() 
			 *method as a 1D array (because 2D arrays are essentially a 
			 *collection of 1D arrays). */
			
		pastLapsFile.close();
		return racingLevel;
	}
	
	/*This method displays a graph of the 12 values passed to it in the 
	 *racingLevel[] array. */
	void grapher (int[] racingLevel) {
		
		int [][] graph = new int [10][12]; /*A 2D array that will act like an 
		x-y grid, where the y-axis (rows) are the racing levels (from 1-10) 
		and the x-axis is the month (from 1-12). If, for example, the student 
		had an average racing level of 8 in December, then a '1' will be stored 
		in graph[2][12]. The row number is '2' because the graph should be 
		displayed with the higher number graphed above the lower number, so a 
		10 racing level would be stored in graph[0][x] because it should be in 
		the first (the highest) row. */
		
		/*Populate the graph[][] array with the '1's that represent 
		 *points on an x-y grid. */
		for (int i=0;i<racingLevel.length; i++) 
			graph[graph.length-racingLevel[i]][i]=1;
		
		/*This loop displays the graph itself. The first for loop runs 10 
		 *times, and essentially 'prints' each row of the graph. So when i=0, 
		 *it prints the top row which represents a 10 racing level. It first 
		 *prints part of the axes, and then executes a second for loop. This 
		 *for loop goes through the ith row of the graph[][] array, and prints 
		 *a space if there is no data (a 0) or a '*' (a point) if there is a 
		 *'1' stored. */
		for (int i=0; i<graph.length; i++) {
			
			if (i==0) {
				System.out.println("      ^");
				System.out.println("      |");
				System.out.print("   10 |");
			}
			else if (i==1) {
				System.out.println("      |");
				System.out.print("   9  |");
			}	
			else if (i==2) {
				System.out.println("      |");
				System.out.print(" R 8  |");	
			}
			else if (i==3) {
				System.out.println(" a    |");
				System.out.print(" c 7  |");
			}
			else if (i==4) {
				System.out.println(" i    |");
				System.out.print(" n 6  |");
			}
			else if (i==5) {
				System.out.println(" g    |");
				System.out.print("   5  |");
			}
			else if (i==6) {
				System.out.println(" L    |");
				System.out.print(" e 4  |");	
			}
			else if (i==7) {
				System.out.println(" v    |");
				System.out.print(" e 3  |");
			}
			else if (i==8) {
				System.out.println(" l    |");
				System.out.print("   2  |");
			}
			else {
				System.out.println("      |");
				System.out.print("   1  |");
			}

			for (int j=0;j<graph[i].length; j++) {
				if (graph[i][j]==0)
					System.out.print("     ");
				else 
					System.out.print("  *  ");
			}
			System.out.println();
		}
		/*Prints the bottom axes of the graph. */
		System.out.println("      |                                                                 ");
		System.out.println("   0  ----------------------------------------------------------------> ");
		System.out.println("         J    F    M    A    M    J    J    A    S    O    N    D       ");
		System.out.println("         A    E    A    P    A    U    U    U    E    C    O    E       ");
		System.out.println("         N    B    R    R    Y    N    L    G    P    T    V    C       ");
		System.out.println("        '11  '11  '11  '11  '11  '11  '11  '11  '11  '11  '11  '11      ");
		System.out.println("\n                              Month (Time)                          \n");
	}
	
	void compareLapTimes() throws IOException {
		try {
			RandomAccessFile pastLapsFile = new RandomAccessFile ("pastLapsFile.dat","rw");
			RandomAccessFile studentFile = new RandomAccessFile ("studentFile.dat","rw");
			System.out.printf("%-4s%-18s%-5s%-15s%-12s%-12s%-12s\n\n", "ID", "Student Name", "Age", "Racing Level", "Avg. 400m", "Avg. 800m", "Avg. 1000m");
			System.out.printf("%-4s%-38s%-12s%-12s%-12s\n\n", "a)", "World Record", "19.92", "37.12", "45.55");
			System.out.printf("%-4s%-38s%-12s%-12s%-12s\n\n", "b)", "National Record", "20.17", "37.95", "46.01");
			System.out.printf("%-4s%-38s%-12s%-12s%-12s\n\n", "c)", "Student Record", "20.95", "38.26", "47.67");
			displayAllRecordsPerformanceData();/*Display all the records in the 
			teamFile (all the racers) to show the user which student he wishes 
			to compare.*/
			
			System.out.println("\nEnter the ID of the student whose previous lap times you would like to see:");
			Validator validator = new Validator();
			int desiredId = validator.getAndValidateInt(1, getLastStudentRecordId()); 
			/*The ID of the student the user would like to compare lap times with. */
			
			int pastLapsCount = countPastLapsRecords(); /*Number of records 
			in the pastLapsFile. */
			boolean recordFound=false; /*Whether the desired record was found 
			in the pastLapsFile. */
			
			for (int record=0; !recordFound && record<pastLapsCount; record++) {
				pastLapsFile.seek(record*384+0);
				if (desiredId == pastLapsFile.readInt()) {
					recordFound=true;
					
					int studentCount = countRecords(); /*The number of records 
					(all the students) in the studentFile. */
					
					boolean nameFound = false; /*Whether the name of the student 
					has been found */
					for (int i=0; !nameFound && i<studentCount; i++) {
						studentFile.seek(i*128+0);
						if (desiredId == studentFile.readInt()) {
							studentFile.seek(i*128+4);
							System.out.println("\n" +(FixedLengthStringIO.readFixedLengthString(18, studentFile)).trim() +"'s previous lap times:\n");
							nameFound=true;
						}
					}
					if (!nameFound) {
						System.out.println("This student either does not exist or has somehow been deleted.");
						break;
					}
					displayPastLapTimes (record);/*This method displays the 
					past lap times of the desired record. */		
				}
			}
			if (!recordFound) 
				System.out.println("Sorry, the desired student does not have any past lap times.");
			
			studentFile.close();	
			pastLapsFile.close();
			System.out.println("\nPress 1 to view another student's past lap times or press 2 to exit to the main menu.");
			int menu = validator.getAndValidateInt(1, 2);
			if (menu==1)
				compareLapTimes();
		}
		catch (EOFException e) {
			System.out.println("The file has unexpectedly reached its end. Please try again.");
		}
		catch (FileNotFoundException e) {
			System.out.println("The requested file cannot be found. Please try again.");
		}
		catch (IOException e) {
			System.out.println("An unexpected I/O error has occured. Please try again.\nThe exact reason for this is: " + e.getMessage());
		}	
	}
	
	/*This method displays the past lap times of the desired record. */
	void displayPastLapTimes (int record) throws IOException {
		RandomAccessFile pastLapsFile = new RandomAccessFile ("pastLapsFile.dat","rw");
		double [][] pastLapTimes = new double[13][3]; /*A 2D array that will 
		store the lap times read from the pastLapsFile, that are to be displayed. 
		It is 13 instead of 12 rows because an extra row to store the average.*/
		
		for (int month=0; month<12; month++) {
			pastLapsFile.seek(record*384 + month*32 + 8); 
			pastLapTimes[month][0] = pastLapsFile.readDouble();
			pastLapTimes[12][0] = pastLapTimes[12][0] + pastLapTimes[month][0]; 
			/*This is the average 400m lap time for the whole year being 
			 *calculated (the 13th row of the array). */
			
			pastLapsFile.seek(record*384 + month*32 + 16);
			pastLapTimes[month][1] = pastLapsFile.readDouble();
			pastLapTimes[12][1] = pastLapTimes[12][1] + pastLapTimes[month][1];
			
			pastLapsFile.seek(record*384 + month*32 + 24);
			pastLapTimes[month][2] = pastLapsFile.readDouble();
			pastLapTimes[12][2] = pastLapTimes[12][2] + pastLapTimes[month][2];
		}
		
		pastLapTimes[12][0] = pastLapTimes[12][0]/12; 
		pastLapTimes[12][1] = pastLapTimes[12][1]/12;
		pastLapTimes[12][2] = pastLapTimes[12][2]/12;
		
		/*Display the contents of the pastLapTimes[][] array. */
		System.out.printf("%-16s%-15s%-12s%-12s%-12s\n\n", "Month", "Racing Level", "Avg. 400m", "Avg. 800m", "Avg. 1000m");
		for (int month = 0; month<pastLapTimes.length; month++) 
			System.out.printf("%-16s%-15d%2.2f%12.2f%12.2f\n\n", getDesiredMonth(month), calculateRacingLevel(pastLapTimes[month]), pastLapTimes[month][0], pastLapTimes[month][1], pastLapTimes[month][2]);
			
		pastLapsFile.close();
	}
	
	/*Returns the name of the month that corresponds to the given number. 
	 *1 represents January, and so on. */
	String getDesiredMonth (int month) {
		String nameOfMonth="";
		
		if (month==0) 
			nameOfMonth = "January";
		else if (month==1)
			nameOfMonth = "February";
		else if (month==2)
			nameOfMonth = "March";
		else if (month==3)
			nameOfMonth = "April";
		else if (month==4)
			nameOfMonth = "May";
		else if (month==5)
			nameOfMonth = "June";
		else if (month==6)
			nameOfMonth = "July";
		else if (month==7)
			nameOfMonth = "August";
		else if (month==8)
			nameOfMonth = "September";
		else if (month==9)
			nameOfMonth = "October";
		else if (month==10)
			nameOfMonth = "November";
		else if (month==11)
			nameOfMonth = "December";
		else if (month==12)
			nameOfMonth = "Year Average";											
		
		return nameOfMonth;				
	}
	
	/*Returns the average racing level of a student for a month, based on 
	 *the average 400, 800 and 1000m times the student had that month. */
	int calculateRacingLevel (double monthPastLaps[]) {
		try {
			int racingLevel400=0;
			int racingLevel800=0;
			int racingLevel1000=0;
			
			if (monthPastLaps[0]>0) {
				if (monthPastLaps[0]<=22)
					racingLevel400 = 10;
				else if (monthPastLaps[0]<=23)
					racingLevel400 = 9;	
				else if (monthPastLaps[0]<=24)
					racingLevel400 = 8;
				else if (monthPastLaps[0]<=25)
					racingLevel400 = 7;
				else if (monthPastLaps[0]<=26)
					racingLevel400 = 6;
				else if (monthPastLaps[0]<=27)
					racingLevel400 = 5;
				else if (monthPastLaps[0]<=28)
					racingLevel400 = 4;
				else if (monthPastLaps[0]<=29)
					racingLevel400 = 3;
				else if (monthPastLaps[0]<=30)
					racingLevel400 = 2;
				else if (monthPastLaps[0]>30)
					racingLevel400 = 1;
			}
			else
				racingLevel400=0;
			
			if (monthPastLaps[1]>0) {
				if (monthPastLaps[1]<=40)
					racingLevel800 = 10;
				else if (monthPastLaps[1]<=41)
					racingLevel800 = 9;	
				else if (monthPastLaps[1]<=42)
					racingLevel800 = 8;
				else if (monthPastLaps[1]<=43)
					racingLevel800 = 7;
				else if (monthPastLaps[1]<=44)
					racingLevel800 = 6;
				else if (monthPastLaps[1]<=45)
					racingLevel800 = 5;
				else if (monthPastLaps[1]<=46)
					racingLevel800 = 4;
				else if (monthPastLaps[1]<=47)
					racingLevel800 = 3;
				else if (monthPastLaps[1]<=48)
					racingLevel800 = 2;
				else if (monthPastLaps[1]>48)
					racingLevel800 = 1;
			}
			else
				racingLevel800=0;	
			
			if (monthPastLaps[2]>0) {
				if (monthPastLaps[2]<=48)
					racingLevel1000 = 10;
				else if (monthPastLaps[2]<=49)
					racingLevel1000 = 9;	
				else if (monthPastLaps[2]<=50)
					racingLevel1000 = 8;
				else if (monthPastLaps[2]<=51)
					racingLevel1000 = 7;
				else if (monthPastLaps[2]<=52)
					racingLevel1000 = 6;
				else if (monthPastLaps[2]<=53)
					racingLevel1000 = 5;
				else if (monthPastLaps[2]<=54)
					racingLevel1000 = 4;
				else if (monthPastLaps[2]<=55)
					racingLevel1000 = 3;
				else if (monthPastLaps[2]<=56)
					racingLevel1000 = 2;
				else if (monthPastLaps[2]>56)
					racingLevel1000 = 1;
			}
			else
				racingLevel1000=0;
			
			int averager = 3;
			if (racingLevel400==0)
				averager--;
			if (racingLevel800==0)
				averager--;
			if (racingLevel1000==0)
				averager--;		
			int averageRacingLevel = (racingLevel400 +racingLevel800 +racingLevel1000)/averager;
			return averageRacingLevel;	
		}
		catch (ArithmeticException e) {
			System.out.println("Sorry, a calculation involving division by 0 occured. Please try again.");
			return 0;
		}					
	}
	
	//Returns the ID of the last student record in the studentFile.
	int getLastStudentRecordId() throws IOException {
		int lastStudentId;
		RandomAccessFile studentFile = new RandomAccessFile ("studentFile.dat","rw");
		int studentCount = countRecords();
		studentFile.seek((studentCount-1)*128+0);
		lastStudentId = studentFile.readInt();
		return lastStudentId;
	}
	
	/*This methods counts the current number of records in the pastLapsFile.dat, 
	 *and returns this value to the calling method.*/
	int countPastLapsRecords() throws IOException {
		RandomAccessFile pastLapsFile = new RandomAccessFile ("pastLapsFile.dat","rw");
		int records = (int)(pastLapsFile.length()/384);
		pastLapsFile.close();
		return records;
	}
	
	/*This methods counts the current number of records in the studentFile.dat, 
	 *and returns this value to the calling method.*/
	int countRecords() throws IOException {
		RandomAccessFile studentFile = new RandomAccessFile ("studentFile.dat","rw");
		int records = (int)(studentFile.length()/128);
		studentFile.close();
		return records;
	}
	
	/*Displays the performance data of all the records in the studentFile.*/
	void displayAllRecordsPerformanceData() throws IOException {
		RandomAccessFile studentFile = new RandomAccessFile ("studentFile.dat","rw");
		int count = countRecords();
		
		for (int record=0; record<count; record++) {
			Student student = new Student();
			studentFile.seek(record*128+0); 
			student.setId(studentFile.readInt()); 
			studentFile.seek(record*128+4);
			student.setName(FixedLengthStringIO.readFixedLengthString(18, studentFile));
			studentFile.seek(record*128+40);
			student.setAge(studentFile.readInt());
			studentFile.seek(record*128+100);
			student.setRacingLevel(studentFile.readInt()); 
			studentFile.seek(record*128+104);
			student.setAverage400(studentFile.readDouble()); 
			studentFile.seek(record*128+112);
			student.setAverage800(studentFile.readDouble());
			studentFile.seek(record*128+120);
			student.setAverage1000(studentFile.readDouble());
			
			student.displayRecordPerformanceData();
		}
		studentFile.close();
	}
}